/*
 * using 키워드란?
 * - 특정 네임 스페이스 하위 존재하는 기능을 가져오는 역할을 수행한다. (+ 즉, 해당 키워드를 활용하면
 * 미리 제작 된 여러가지 편리 기능을 간단하게 재사용 하는 것이 가능하다.)
 * 
 * 단, 특정 기능을 사용하기 위해서 using 키워드는 반드시 필요한 요구 사항은 아니기 때문에 using
 * 키워드를 사용하지 않아도 특정 기능을 사용하는 것은 가능하다.
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
 * 프로그램 (Program) 이란?
 * - 컴퓨터에게 특정 작업을 지시하기 위한 여러가지 명령문이 나열되어있는 파일을 의미한다. (+ 즉, 
 * 프로그램은 단순한 명령문을 집합이라는 것을 알 수 있다.)
 *
 * 오늘 날 프로그램은 대부분 프로그래밍 언어라는 것을 통해서 제작하는 것이 가능하다.
 * 
 * 프로그래밍 언어 (Programming Language) 란?
 * - 컴퓨터 작업을 지시 할 프로그램을 제작하기위한 언어를 의미한다. (+ 즉, 
 * 프로그래밍 언어를 활용하면 컴퓨터와 대화를 하는 것이 가능하다.)
 * 
 * 단, 컴퓨터는 0 과 1 로 이루어진 기계어 코드만을 인지 할 수 있기 때문에 해당 언어를 제외한 다른
 * 언어는 기계어 코드로 변환 될 필요가 있다는 것을 알 수 있다. (+ 즉, 기계어를 제외한 다른 언어는
 * 컴파일러 or 인터프리터의 도움을 받을 필요가 있다는 것을 알 수 있다.)
 * 
 * 컴파일러 (Compiler) 란?
 * - 프로그래밍 언어로 작성 된 명령문을 기계어로 변환하는 역할을 수행하는 프로그램을 의미한다. 
 * (+ 즉, 컴파일러가 존재하기 때문에 기계어를 몰라도 컴퓨터에게 특정 명령을 내리는 것이 가능하다.)
 * 
 * 인터프리터 (Interpreter) 란?
 * - 컴파일러와 같이 명령문을 기계어로 변환하는 역할을 수행하는 프로그램을 의미한다.
 * 
 * 단, 컴파일러가 명령문을 미리 번역해서 기계어로 변환하는 반면 인터프리터는 프로그램이 실행 중에 
 * 기계어로 변환 되는 차이점이 존재한다.
 * 
 * 따라서 인터프리터 방식으로 동작하는 언어는 게임과 같이 고성능을 요구하는 프로그램을 제작하는데 
 * 적합하지 않다는 것을 알 수 있다.
 * 
 * C# 은 컴파일 방식과 인터프리터 방식을 모두 사용하고 있으며 이런 방식을 JIT (Jsut In Time) 
 * 방식이라고 한다. (+ 즉, C# 은 컴파일 방식의 장점과 인터프리터 방식의 장점을 모두 지니고 있는 
 * 하이브리드 언어라는 것을 알 수 있다.)
 * 
 * C# 으로 제작 된 프로그램의 동작 원리
 * - C# 은 컴파일 과정을 거치고 나면 기계어 아닌 IL (Intermediate Language) 코드로 변환이 되며 
 * 이렇게 변환 된 IL 코드를 CLR (Common Language Runtime) 에 의해서 실행 중에 기계어로 변환되는 
 * 특징이 존재한다. (+ 즉, 프로그램이 실행 중에 기계어로 변환되기 때문에 현재 실행되고 있는 플랫폼에 
 * 맞는 최적화 된 명령문을 생성 할 수 있다는 것을 알 수 있다.)
 */
namespace Example._02910000000001_EvenI.Programming.E01.Example.Classes.Runtime.Example_01
{
	/*
	 * 클래스 (Class) 란?
	 * - 여러 메서드를 포함하고 있는 기능을 의미한다. (+ 즉, 클래스 내부에는 
	 * 여러가지 기능에 해당하는 메서드가 존재한다는 것을 알 수 있다.)
	 * 
	 * C# 은 객체 지향 프로그래밍 패러다임을 지원하기 때문에 클래스를 활용하면 다양한 사물을 
	 * 표현하는 것이 가능하다.
	 */

	/**
	 * Example 1
	 */
	internal class CE01Example_01
	{
		/** 초기화 */
		public static void Start(string[] args)
		{
			/*
			 * Console 클래스란?
			 * - 콘솔 창에 문장을 출력하거나 읽어들일 수 있는 역할을 수행하는 클래스를 의미한다. 
			 * (+ 즉, 해당 클래스를 활용하면 다양한 결과 값을 콘솔 창에 출력함으로서 사용자와 
			 * 상호 작용을 하는 것이 가능하다.)
			 * 
			 * Console.Write 메서드 vs Console.WriteLine 메서드
			 * - 두 메서드 모두 콘솔 창에 특정 문장을 출력하는 역할을 수행한다.
			 * 
			 * Console.Write 메서드는 단순히 문장을 출력하는 반면 Console.WriteLine 메서드는 
			 * 문장을 출력 후 개행 처리가 자동적으로 이루어지는 차이점이 존재한다.
			 */
			Console.WriteLine("Hello, World!");
		}
	}
}
